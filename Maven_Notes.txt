Maven Clean => deletes target folder
Maven Compile => compiles all .java files in to .class files in the Target folder
Maven Test-Compile => compiles the project files and test files
Maven Test in intelliJ is skipping running test by deafault | To force running the tests run mvn test -Dmaven.test.skip=false
		report of the test is saved in the target/surefire-reports
Maven install => creates a jar file for the project in the root of Target folder and installs it to the local repository
Maven Package => creates a jar without installing it to the local repository

Maven build life cycle :
Validate -> Compile -> Test -> Package -> Integration Tests -> Verify -> Install -> Deploy

Every time a maven goal is executed all of the goals before it in the build life cycle are executed as well

Snapshot on the version number means that the application is in development   

Transient Dependencies are dependencies of dependencies
Maven Helper Plugin is hlepful in resolving dependency conflicts

Versions => We can specify a range of versions <version>[4.1,4.5]</version> '[' braket is inclusive '(' is exclusive

Super pom => a pom file containing a lot of information about configuration of the project like default directory structure , default plugins,
repository adress ect 
mvn help:effective-pom -Doutput=effective-pom.xml => is a maven goal that generates a super pom file and writes it to a file
-D is how we set parameters

mvn help:effective-settings contains information on the adress of the local repository

Multi module Maven -> we create a project with <packaging>pom to serve as a parent. Then we create modules inside the project 
The modules will have their own poms with default jar packaging 
Modules are referenced in the parent pom and parent pom is referenced inside the child poms

Good practice is to let the parent pom to manage the versions of dependecies <dependencyManegment> we declare the dependencies and versions
in the parent and we declare only groupId and artifactId in the children

We can also add to poms of the modules dependencies to other moduls in the project. In the example we add dependency of data module to business
module.

${project.version} => Maven built in variable

mvn -X runs maven in debug mode
mvn -X clean install >> sample.txt will output log to a file
mvn --help 